{
    "version": "https://jsonfeed.org/version/1",
    "title": "netanel-m",
    "description": "",
    "home_page_url": "https://netanel-m.github.io",
    "feed_url": "https://netanel-m.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "Netanel M."
    },
    "items": [
        {
            "id": "https://netanel-m.github.io/projects/",
            "url": "https://netanel-m.github.io/projects/",
            "title": "Projects",
            "summary": "In this page you can see some of my personal projects I've done for fun and educational purposes. This project bridges p5.js with google's blockly. This enables an aspiring programmer to become familiar with p5.js through a visual block based programming environment. Super Binary Man&hellip;",
            "content_html": "<p><!-- wp:heading --></p>\n<h2 id=\"mcetoc_1gk8f4fe12q\">Introduction</h2>\n<p><!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>In this page you can see some of my personal projects I've done for fun and educational purposes.</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1gk8f4fe12q\">Introduction</a></li>\n<li><a href=\"#mcetoc_1gk8f4fe12r\">p5.block</a></li>\n<li><a href=\"#mcetoc_1gk8f4fe12s\">Super Binary Man</a></li>\n<li><a href=\"#mcetoc_1gk8f4fe12t\">Inherited Behaviours - Processing Py</a></li>\n<li><a href=\"#mcetoc_1gk8f4fe12u\">Cellular Automata for Cave Generation</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1gk8f4fe12r\">p5.block</h2>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://github.com/Netanel-M/p5.block/raw/main/example.png\" alt=\"\" width=\"1920\" height=\"879\" data-is-external-image=\"true\"></figure>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://github.com/Netanel-M/p5.block/raw/main/example2.png\" alt=\"\" width=\"1920\" height=\"879\" data-is-external-image=\"true\"></figure>\n<p>This project bridges p5.js with google's blockly. This enables an aspiring programmer to become familiar with p5.js through a visual block based programming environment.</p>\n<table>\n<tbody>\n<tr>\n<td>Year</td>\n<td>Language</td>\n<td>Environment</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>EcmaScript 6 (JS)</td>\n<td>HTML 5</td>\n</tr>\n</tbody>\n</table>\n<p><!-- /wp:paragraph --></p>\n<p><!-- wp:heading --></p>\n<h2 id=\"mcetoc_1gk8f4fe12s\">Super Binary Man</h2>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://camo.githubusercontent.com/c01411055c6fe430b1fb1a6ae3766a4f33b37a045e692250756890612a1b4968/68747470733a2f2f692e696d6775722e636f6d2f65475745516e452e706e67\" alt=\"\" width=\"1923\" height=\"942\" data-is-external-image=\"true\"></figure>\n<p><!-- /wp:heading --></p>\n<p><!-- wp:image {\"id\":261,\"width\":615,\"height\":303,\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"is-style-rounded\"} --></p>\n<p><!-- /wp:image --></p>\n<p><!-- wp:paragraph --></p>\n<p>Super Binary Man was my HTML5 study project while I was studying for my W3C Front End Developer Certification. It's an HTML 5 Game written in EcmaScript 6 using the standard canvas element. Programmatically it features an object oriented design, canvas graphics, a custom made game engine and basic gameplay mechanics.</p>\n<p><!-- /wp:paragraph --></p>\n<p><!-- wp:paragraph --></p>\n<p>To play it, open it on a pc, use the arrow or wasd keys to move, and space to Jump. Avoid hitting the red computer-controlled enemies. The goal is to reach the number displayed at the top and match the sum above it with it, by hitting the yellow boxes from below in an order that accumulates to the goal. This actually creates a binary number sequence that corresponds to sequence, where active boxes corresponds to binary 1s, and unactivated boxes correspond to 0s.</p>\n<p><!-- /wp:paragraph --></p>\n<p><!-- wp:table --></p>\n<figure class=\"wp-block-table\">\n<table>\n<tbody>\n<tr>\n<td>Year</td>\n<td>Language</td>\n<td>Environment</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>EcmaScript 6 (JS)</td>\n<td>HTML 5</td>\n</tr>\n</tbody>\n</table>\n</figure>\n<p><!-- /wp:table --></p>\n<p><!-- wp:heading --></p>\n<h2 id=\"mcetoc_1gk8f4fe12t\">Inherited Behaviours - Processing Py</h2>\n<p><!-- /wp:heading --></p>\n<p><!-- wp:image {\"id\":264,\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"is-style-rounded\"} --></p>\n<p><!-- /wp:image --></p>\n<p><!-- wp:paragraph --></p>\n<p>Inherited Behaviours - Processing Py is a project born out of following the book \"The Nature of Code\" by Daniel Shiffman. It is an implementation of a Genetic Algorithm (GA) inside a physics simulation. The different characters on screen can be selectively bred by holding the left mouse button and then generating a new generation of offspring with the right mouse button. A crossover genetic function is applied to transfer genetic material between the selected characters and a new population is created. The user can experiment with different characters and see how their looks and movement characteristics are changed.</p>\n<p><!-- /wp:paragraph --></p>\n<p><!-- wp:table --></p>\n<figure class=\"wp-block-table\">\n<table>\n<tbody>\n<tr>\n<td>Year</td>\n<td>Language</td>\n<td>Environment</td>\n</tr>\n<tr>\n<td>2018</td>\n<td>Python</td>\n<td>Processing 3</td>\n</tr>\n</tbody>\n</table>\n</figure>\n<p><!-- /wp:table --></p>\n<p><!-- wp:heading --></p>\n<h2 id=\"mcetoc_1gk8f4fe12u\">Cellular Automata for Cave Generation</h2>\n<p><!-- /wp:heading --></p>\n<p><!-- wp:image {\"id\":268,\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"is-style-rounded\"} --></p>\n<p><!-- /wp:image --></p>\n<p><!-- wp:paragraph --></p>\n<p>This project is a fun implementation of a cellular automata algorithm as popularized by the famous \"Game of Life\" program. It shows how cellular automata can be used to generate cave like structures. Very popular in video game design.</p>\n<p><!-- /wp:paragraph --></p>",
            "author": {
                "name": "Netanel M."
            },
            "tags": [
            ],
            "date_published": "2021-06-11T09:59:36+03:00",
            "date_modified": "2022-12-14T16:03:39+02:00"
        },
        {
            "id": "https://netanel-m.github.io/kubernetes-kubectl-cheatsheet/",
            "url": "https://netanel-m.github.io/kubernetes-kubectl-cheatsheet/",
            "title": "Kubernetes - kubectl cheatsheet",
            "summary": "Kubernetes is a system that can at times be a bit threatening. It is truly a vast and agile service, and maintaining it can feel a bit off-putting at times. In this article, I'm going to write down some of the most common commands I&hellip;",
            "content_html": "<p><!-- wp:paragraph --></p>\n<p>Kubernetes is a system that can at times be a bit threatening. It is truly a vast and agile service, and maintaining it can feel a bit off-putting at times. In this article, I'm going to write down some of the most common commands I use in my day to day Kubernetes maintenance.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":1} --></p>\n<h1>Pods</h1>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>A Pod is the smallest unit that hosts Containers in Kubernetes. It can at minimum contain one container. It can also host multiple containers together, which can talk to each other over a localhost interface (127.0.0.1).</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading --></p>\n<h2>Getting all Pods</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>Used to get all Pods in the system.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:paragraph --></p>\n<p>Can be used with the -o flag to get more information such as which Mode hosts which Container. The -n flag can be added to specify a specific namespace</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">kubectl get pods -A</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading --></p>\n<h2>Describe a Pod</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>Describing a Pod allows you to see expanded information related to a given Pod, such as the last events it experienced, its Labels, Volumes and more.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">kubectl describe pod <pod name> -n <namespace></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading --></p>\n<h2>Delete a Pod</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>If you want to force a pod to restart itself, simply delete it with the following command.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">kubectl delete pod <pod name> -n <namespace></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading --></p>\n<h2>Getting the logs of a Pod</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>You can get the logs of a pod with this simple command. Redirect it into a file to prevent overloading your terminal's buffer. Note that -c specifies the container's name inside the pod.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">kubectl logs <pod name> -n <namespace> -c >container></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading --></p>\n<h2>Accessing the shell of a container</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>This command will allow you to get access to the shell inside a pod. Use -c to specify the container name.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">kubectl exec -it <pod name> sh -n <namespace></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":1} --></p>\n<h1>Namespaces</h1>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>Namespaces are an abstraction that allows you to group resources together under a specific name.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading --></p>\n<h2>Getting all Namespaces</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>This one is used to get all Mamespaces the system contains, A Namespace is a logical way to associate resources with a specific name, which is useful for logically grouping components together.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">kubectl get ns</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading --></p>\n<h2>Deleting a Namespace</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>Deleting a namespace will purge all resources associated with it, such as deployments, pods, services etc.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">kubectl delete ns <namespace></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading {\"level\":1} --></p>\n<h1>Deployments</h1>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>Deployments are used to configure pods A deployment contains instructions that specifies the configuration of a Pod.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading --></p>\n<h2>Get Deployments in a given Namespace</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>This command can be used to list the Deployments in a given Namespace.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">kubectl get deployments -n <namespace></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading --></p>\n<h2>Edit a Deployment</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>You can use this command to edit a Deployment, where you can change everything that makes a Deployment work, such as the specs of the Container, or the image it uses.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">kubectl edit deployment <deployment name> -n <namespace></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading --></p>\n<h2>Delete a Deployment</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>If you want to delete your pods premanently, you should delete your deployment. Use the following command to do so.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">kubectl delete deployment <deployment name> -n <namespace></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading {\"level\":1} --></p>\n<h1>Nodes</h1>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>Nodes do the heavy lifting, they're either workers who host the worker pods themselves, or the masters who host the API.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading --></p>\n<h2>Getting Nodes</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>You can see a list of Modes and their status with this command. Use the -o flag to see more information about them.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">kubectl get nodes</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading --></p>\n<h2>Draining a Node</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>If you want to vacate your Node from all Pods you can use this command. Use it when you want to perform maintenance on a node. This will cause Kubernetes to transfer the pods to another Node that has free resources.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">kubectl drain <node name></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading --></p>\n<h2>Deleting a Node</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>To permanently delete a node from your cluster, you can use this command, however you should safely drain it first!</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">kubectl delete node <node name></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading --></p>\n<h2>Showing the labels of a Node</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>Use this command to displays the current labels assigned to a node.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">kubectl get nodes --show-labels</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading --></p>\n<h2>Labeling a Node</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>You can label nodes in order to specify which node will host which deployments. The selector is used in a deployment to label the pods, and you use the following command to label the node. This completes the circle and allows a pod to be assigned to a given node using the node's label.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">kubectl label nodes <node name> <key>=<value></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":1} --></p>\n<h1>Services</h1>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>Services serve as a way to abstract between pods and network services.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading --></p>\n<h2>Getting services</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>This command will allow you to see all services in the cluster, along with their type, namespace, port etc. Use -n instead of -A to filter for a specific namespace.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">kubectl get ns -A</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading --></p>\n<h2>Delete a service</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>The following command can be used to delete a service.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">kubectl delete svc <service name> -n <namespace></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n",
            "author": {
                "name": "Netanel M."
            },
            "tags": [
                   "Kubernetes",
                   "Kubectl",
                   "Containers"
            ],
            "date_published": "2021-06-10T06:05:09+03:00",
            "date_modified": "2022-12-14T13:05:45+02:00"
        },
        {
            "id": "https://netanel-m.github.io/home/",
            "url": "https://netanel-m.github.io/home/",
            "title": "Home",
            "summary": "I'm a Linux System Administration, and a deployment engineer with over 3 years of experience in the field and many more since I've first made my introduction to Linux and the open source ecosystem. Here in my website you can find tutorials related to my&hellip;",
            "content_html": "<p><!-- wp:heading --></p>\n<h2>About me</h2>\n<p><!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>I'm a Linux System Administration, and a deployment engineer with over 3 years of experience in the field and many more since I've first made my introduction to Linux and the open source ecosystem.</p>\n<p><!-- /wp:paragraph --></p>\n<p><!-- wp:paragraph --></p>\n<p>Here in my website you can find tutorials related to my field of work, and also some of my projects.</p>\n<p><!-- /wp:paragraph --></p>\n<p><!-- wp:paragraph --></p>\n<p><!-- /wp:paragraph --></p>\n<p><!-- wp:heading --></p>\n<p><!-- /wp:paragraph --></p>\n<p><!-- wp:wpforms/form-selector {\"formId\":\"228\"} /--></p>\n<p><!-- wp:social-links --></p>\n<ul class=\"wp-block-social-links\">\n<li style=\"list-style-type: none;\">\n<ul class=\"wp-block-social-links\"><!-- wp:social-link {\"url\":\"https://github.com/netanel-m\",\"service\":\"github\"} /--></ul>\n</li>\n</ul>\n<p><!-- wp:social-link {\"url\":\" www.linkedin.com/in/netanel-m\",\"service\":\"linkedin\"} /--></p>\n<p><!-- /wp:social-links --></p>",
            "author": {
                "name": "Netanel M."
            },
            "tags": [
            ],
            "date_published": "2021-06-05T14:57:43+03:00",
            "date_modified": "2022-12-14T16:03:48+02:00"
        },
        {
            "id": "https://netanel-m.github.io/introduction-to-basic-linux-permissions/",
            "url": "https://netanel-m.github.io/introduction-to-basic-linux-permissions/",
            "title": "Introduction to basic Linux permissions",
            "summary": "Linux permissions are often very confusing to new users coming from Windows to Linux for the first time. Casual Linux users that have been using it for years may even misunderstand this topic and so I thought it would handy to write a small guide&hellip;",
            "content_html": "<p><!-- wp:paragraph --></p>\n<p>Linux permissions are often very confusing to new users coming from Windows to Linux for the first time. Casual Linux users that have been using it for years may even misunderstand this topic and so I thought it would handy to write a small guide that would hopefully be very easy to understand.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading --></p>\n<h2>Types of permissions</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>There are 3 basic permissions:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:table --></p>\n<figure class=\"wp-block-table\">\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>File</th>\n<th>Directory</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Read</td>\n<td>Read the content</td>\n<td>List the contents of the directory</td>\n</tr>\n<tr>\n<td>Write</td>\n<td>Write or modify into the file</td>\n<td>Delete directory, create new files inside it</td>\n</tr>\n<tr>\n<td>Execute</td>\n<td>Run script or binary file</td>\n<td>Enter directory</td>\n</tr>\n</tbody>\n</table>\n<figcaption>File permissions</figcaption>\n</figure>\n<p>\n<!-- /wp:table --></p>\n<p><!-- wp:paragraph --></p>\n<p>To <strong>read</strong> a file, we can use the <code>cat</code> command. To <strong>write</strong> into the file, we can use a text editor such as <code>vim</code> or <code>nano</code>. To <strong>enter</strong> a directory, we can <code>cd</code> into it, and to <strong>list</strong> the contents of a directory we can use the <code>ls</code> command.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading --></p>\n<h2>Users, groups, and other</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>Permissions in Linux has three \"tiers\", the first is the <strong>User</strong> permission, which applies to the owner of a file. The second is the <strong>Group</strong> permission which applies to the group that owns the file and the third is the <strong>Other</strong> permission which applies to everyone else. How do we assign these? Hold on tight as I explain that next.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading --></p>\n<h2>How do I use this?</h2>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>The command we use in unix-based operating systems to change user permissions is the <code>chmod</code> command. the syntax is like this:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">chmod <permission> <file></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>But what do we put under <permission>?</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:paragraph --></p>\n<p>Well there's two methods, the first is to use an octal value. Fear not, it's actually very simple.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":3} --></p>\n<h3>Basic octal permission values</h3>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:list --></p>\n<ul>\n<li>4 - Read</li>\n<li>2 - Write</li>\n<li>1 - Execute</li>\n<li>0 - No permissions (Deny all)</li>\n</ul>\n<p>\n<!-- /wp:list --></p>\n<p><!-- wp:paragraph --></p>\n<p>So if you wanted to grant a read permission on a file called <code>test</code> you'd do it like this:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">chmod 400 test</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>The first number is a User permission, which means grant a read to the owner of the file, second is the group permission which we deny everything, and the third is the other permission which we also deny all.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:paragraph --></p>\n<p>But what if we wanted to grant a read and a write on a file? If we own this file then we probably want to do both. Well it's really simple, you simply take the Read value (4) and the write value (2) and you add them together (4+2) to get the value 6. so now the command looks like this:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">chmod 600 test</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>Easy right?<br>But what if we wanted to modify a permission instead of setting all three together?</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":3} --></p>\n<h3>Using non octal values</h3>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>The alternative to octal values, and the solution to the previous problem is to use letters instead of numbers. The three octal values are represented like so:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:list --></p>\n<ul>\n<li>r</li>\n<li>w</li>\n<li>x</li>\n</ul>\n<p>\n<!-- /wp:list --></p>\n<p><!-- wp:paragraph --></p>\n<p>And for User Group and Other we'll use:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:list --></p>\n<ul>\n<li>u</li>\n<li>g</li>\n<li>o</li>\n</ul>\n<p>\n<!-- /wp:list --></p>\n<p><!-- wp:paragraph --></p>\n<p>So to solve our previous problem, and add an additional permission to a file or directory with existing permissions we'll use something like this:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">chmod u+x test # Meaning, to add the execute permission to the owner of a file.</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>You can also set the three permissions together like so:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">chmod ugo=rwx test  # giving the read write execute permissions for everyone.</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:paragraph --></p>\n<p>I hope this has been educational for you and I'll see you next time!</p>\n<p>\n<!-- /wp:paragraph --></p>\n",
            "author": {
                "name": "Netanel M."
            },
            "tags": [
                   "Linux Permissions"
            ],
            "date_published": "2020-12-27T09:26:59+02:00",
            "date_modified": "2022-12-14T13:05:45+02:00"
        },
        {
            "id": "https://netanel-m.github.io/lighttpd-quickstart/",
            "url": "https://netanel-m.github.io/lighttpd-quickstart/",
            "title": "Lighttpd Quickstart",
            "summary": "Lighttpd is a tiny web server that's suitable to use on embedded systems and other setups where you want an extremely lightweight and speedy web server. This will server as a short introduction to Lighttpd. We'll start by installing the Extra Packages for Enterprise Linux&hellip;",
            "content_html": "<p><!-- wp:paragraph --></p>\n<p>Lighttpd is a tiny web server that's suitable to use on embedded systems and other setups where you want an extremely lightweight and speedy web server.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:paragraph --></p>\n<p>This will server as a short introduction to Lighttpd.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":4} --></p>\n<h4>Installing lighttpd on Centos 8</h4>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>We'll start by installing the Extra Packages for Enterprise Linux community repository.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">dnf install epel-release</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>And follow up with an installation of lighttpd.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">dnf install lighttpd</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>Next, we'll enable and start the lighttpd daemon.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">systemctl enable lighttpd<restore-line-break>systemctl start lighttpd</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>Issue a curl to make sure the service is working correctly.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">curl localhost</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>If you successfully pulled a webpage, congratulations - lighttpd is installed and working.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:paragraph --></p>\n<p>Now let's dig in the configuration file, open /etc/lighttpd/lighttpd.conf with your favorite text editor and let's go over the config.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:paragraph --></p>\n<p>at the top you should see some default locations.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">var.log_root    = \"/var/log/lighttpd\" # This is where logs will go<restore-line-break>var.server_root = \"/var/www\" # This is where we'll put our html files<restore-line-break>var.state_dir   = \"/run/lighttpd\" # this is where lighttpd will run<restore-line-break>var.home_dir    = \"/var/lib/lighttpd\" # This is the home folder for lighttpd<restore-line-break>var.conf_dir    = \"/etc/lighttpd\" # this is where we store configuration</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>Afterwards you'll see chroot config, we'll skip that. Next let's go over the basic configuration section.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">#######################################################################<restore-line-break>##<restore-line-break>##  Basic Configuration<restore-line-break>## ---------------------<restore-line-break>##<restore-line-break>server.port = 80<restore-line-break><restore-line-break>##<restore-line-break>## bind to a specific IP<restore-line-break>##<restore-line-break>#server.bind = \"localhost\"<restore-line-break><restore-line-break>##<restore-line-break>## Run as a different username/groupname.<restore-line-break>## This requires root permissions during startup. <restore-line-break>##<restore-line-break>server.username  = \"lighttpd\"<restore-line-break>server.groupname = \"lighttpd\"<restore-line-break><restore-line-break>##<restore-line-break>## Document root<restore-line-break>##<restore-line-break>server.document-root = server_root + \"/lighttpd\"<restore-line-break><restore-line-break>##<restore-line-break>## store a pid file<restore-line-break>##<restore-line-break>server.pid-file = state_dir + \"/lighttpd.pid\"<restore-line-break></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>Note the server port, the server bind, and the username and groupname.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:paragraph --></p>\n<p>Here is the logging section.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">#######################################################################<restore-line-break>##<restore-line-break>##  Logging Options<restore-line-break>## ------------------<restore-line-break>##<restore-line-break>## all logging options can be overwritten per vhost.<restore-line-break>##<restore-line-break>## Path to the error log file<restore-line-break>##<restore-line-break>server.errorlog             = log_root + \"/error.log\"<restore-line-break><restore-line-break>##<restore-line-break>## Access log config<restore-line-break>## <restore-line-break>include \"conf.d/access_log.conf\"<restore-line-break><restore-line-break>##<restore-line-break>## The debug options are moved into their own file.<restore-line-break>## see conf.d/debug.conf for various options for request debugging.<restore-line-break>##<restore-line-break>include \"conf.d/debug.conf\"<restore-line-break></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>So as you can see, since our log root is /var/log/lighttpd, errors will go to /var/log/lighttpd/error.log.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:paragraph --></p>\n<p>We'll skip most of the sections and go all the way down to SSL configuration.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">#######################################################################<restore-line-break>##<restore-line-break>##  SSL Support<restore-line-break>## ------------- <restore-line-break>##<restore-line-break>## To enable SSL for the whole server you have to provide a valid<restore-line-break>## certificate and have to enable the SSL engine.::<restore-line-break>##<restore-line-break>##   ssl.engine = \"enable\"<restore-line-break>##   ssl.pemfile = \"/path/to/server.pem\"<restore-line-break>##<restore-line-break>##   $SERVER[\"socket\"] == \"10.0.0.1:443\" {<restore-line-break>##     ssl.engine                  = \"enable\"<restore-line-break>##     ssl.pemfile                 = \"/etc/ssl/private/www.example.com.pem\"<restore-line-break>##<restore-line-break>##     # Check your cipher list with: openssl ciphers -v '...'<restore-line-break>##     # (use single quotes as your shell won't like ! in double quotes)<restore-line-break>##     #ssl.cipher-list             = \"PROFILE=SYSTEM\"<restore-line-break>##<restore-line-break>##     # (recommended to accept only TLSv1.2 and TLSv1.3)<restore-line-break>##     #ssl.openssl.ssl-conf-cmd = (\"Protocol\" => \"-ALL, TLSv1.2, TLSv1.3\")<restore-line-break>##<restore-line-break>##     server.name                 = \"www.example.com\"<restore-line-break>##<restore-line-break>##     server.document-root        = \"/srv/www/vhosts/example.com/www/\"<restore-line-break>##   }<restore-line-break>##<restore-line-break><restore-line-break>## If you have a .crt and a .key file, specify both ssl.pemfile and ssl.privkey,<restore-line-break>## or cat them together into a single PEM file:<restore-line-break>## $ cat /etc/ssl/private/lighttpd.key /etc/ssl/certs/lighttpd.crt \\<restore-line-break>##   > /etc/ssl/private/lighttpd.pem<restore-line-break>##<restore-line-break>#ssl.pemfile = \"/etc/ssl/private/lighttpd.pem\"<restore-line-break>#<restore-line-break># or<restore-line-break>#<restore-line-break>#ssl.privkey = \"/etc/ssl/private/privkey.pem\"<restore-line-break>#ssl.pemfile = \"/etc/ssl/private/cert.pem\"<restore-line-break><restore-line-break>##<restore-line-break>## optionally pass the CA certificate here.<restore-line-break>##<restore-line-break>##<restore-line-break>#ssl.ca-file = \"\"<restore-line-break><restore-line-break>##<restore-line-break>## and the CRL revocation list here.<restore-line-break>##<restore-line-break>##<restore-line-break>#ssl.ca-crl-file = \"\"<restore-line-break><restore-line-break>##<restore-line-break>#######################################################################</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>And below this section is the final one, where we include extra configuration files.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">#######################################################################<restore-line-break>##<restore-line-break>## custom includes like vhosts.<restore-line-break>##<restore-line-break>#include \"conf.d/config.conf\"<restore-line-break>#include \"/etc/lighttpd/vhosts.d/*.conf\"<restore-line-break>##<restore-line-break>#######################################################################</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>Now that we took a look at the configuration, all we have to do is put some html files in the right location and test.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">sudo echo '\n<p>Hello World!</p>\n<p>/ > /var/www/lighttpd/index.html && chown lighttpd:lighttpd /var/www/lighttpd/index.html<restore-line-break>curl localhost</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>You should now see the hello world message, success!</p>\n<p>\n<!-- /wp:paragraph --></p>\n",
            "author": {
                "name": "Netanel M."
            },
            "tags": [
                   "tutorial",
                   "lighttpd",
                   "centos",
                   "Linux"
            ],
            "date_published": "2020-11-20T13:37:58+02:00",
            "date_modified": "2022-12-14T13:05:45+02:00"
        },
        {
            "id": "https://netanel-m.github.io/docker-compose-introduction/",
            "url": "https://netanel-m.github.io/docker-compose-introduction/",
            "title": "Docker-Compose Introduction",
            "summary": "So today we'll take a look at dipping our toes into docker-compose. docker-compose is a tool for defining, running, and managing multiple containers at once. It's very useful for development environments and home servers, where you want many services running in parallel on one machine.",
            "content_html": "<p><!-- wp:paragraph --></p>\n<p>So today we'll take a look at dipping our toes into docker-compose.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":4} --></p>\n<h4>What is docker compose?</h4>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>docker-compose is a tool for defining, running, and managing multiple containers at once. It's very useful for development environments and home servers, where you want many services running in parallel on one machine.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":4} --></p>\n<h4>Downloading docker-compose</h4>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>You can often download docker-compose through your distribution's package manager. If it's not, you can easily download it with pip:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":5} --></p>\n<h5>Docker-compose</h5>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">pip3 install docker-compose</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading {\"level\":5} --></p>\n<h5>Podman-compose</h5>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">pip3 install podman-compose</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading {\"level\":4} --></p>\n<h4>Now for the juicy part</h4>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>Start by creating a directory where you want your configuration to be stored, and create a docker compose file:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock {\"language\":\"shell\"} --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">mkdir docker-compose-tutorial<restore-line-break>cd docker-compose-tutorial<restore-line-break>vim docker-compose.yml</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>Every docker-compose file needs to start with an API version, we'll use api version 3</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock {\"language\":\"yaml\"} --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">version: '3'</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>Next we'll define a service, so go ahead and create a services entry and follow up with a service name:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock {\"language\":\"yaml\"} --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">version: '3'<restore-line-break>services:<restore-line-break>    my_service:<restore-line-break>        <here is where your service's definition attributes go></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>Now, under the service name you can start adding attributes.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock {\"language\":\"yaml\"} --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">version: '3'<restore-line-break>services:<restore-line-break>    my_service:<restore-line-break>        image: httpd<restore-line-break>        ports:<restore-line-break>            - 8080:80</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>This configuration defines a service \"my_service\" that spawns a container with an httpd image, and binds the container's port 80 to our local machine's port 8080.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:paragraph --></p>\n<p>Now run the docker-compose file with</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">docker-compose up</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>Open up a browser and visit 127.0.0.1:8080</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:paragraph --></p>\n<p>You should see a success page, now let's see how we can change the container's index.html file to our own file.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:paragraph --></p>\n<p>make a new folder called html and create inside it a file called index.html with the page you want to serve:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock {\"language\":\"shell\"} --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">mkdir html<restore-line-break>cd html<restore-line-break>echo \"\n<p>Hello World!</p>\n<p>\" > index.html</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>Now go back to your docker-compose file, and add the following under my_service below where you put the ports definition:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock {\"language\":\"yaml\"} --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">version: '3'<restore-line-break>services:<restore-line-break>    my_service:<restore-line-break>        image: httpd<restore-line-break>        ports:<restore-line-break>            - 8080:80<restore-line-break>        volumes:<restore-line-break>            - ./html:/usr/local/apache2/htdocs/<restore-line-break></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>What this means is that we will mount the content of the directory html relative to the docker-compose file inside /usr/local/apache2/htdocs.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:paragraph --></p>\n<p>Restart your container(s) with the folowing command:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">docker-compose restart</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>Visit your browser again and reload the page, you should see the html file being served by your container.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":4} --></p>\n<h4>Passing environment variables to your service</h4>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>A common thing to want to do, besides choosing an image and mounting folders is to pass environment variables to your services. Here is an example for doing so:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock {\"language\":\"yaml\"} --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">version: '3'<restore-line-break>services:<restore-line-break>    my_service:<restore-line-break>        image: httpd<restore-line-break>        ports:<restore-line-break>            - 8080:80<restore-line-break>        volumes:<restore-line-break>            - ./html:/usr/local/apache2/htdocs/<restore-line-break>        environment:<restore-line-break>            - FOO=bar<restore-line-break>            - SPAM=eggs<restore-line-break></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n",
            "author": {
                "name": "Netanel M."
            },
            "tags": [
                   "tutorial",
                   "docker-compose",
                   "docker"
            ],
            "date_published": "2020-11-14T16:49:34+02:00",
            "date_modified": "2022-12-14T13:05:45+02:00"
        },
        {
            "id": "https://netanel-m.github.io/docker-common-commands/",
            "url": "https://netanel-m.github.io/docker-common-commands/",
            "title": "Docker - Common Commands",
            "summary": "This tutorial will introduce you to the very basic Docker / Podman commands. You should memorize these, as you'll use them often. To download an image to your computer, use the following command as an example for how to pull an nginx image: docker pull&hellip;",
            "content_html": "<p><!-- wp:paragraph --></p>\n<p>This tutorial will introduce you to the very basic Docker / Podman commands. You should memorize these, as you'll use them often.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":3} --></p>\n<h3>Pulling an image</h3>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>To download an image to your computer, use the following command as an example for how to pull an nginx image:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">docker pull nginx</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading {\"level\":3} --></p>\n<h3>Listing docker images</h3>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>To list all locally available images use the following command:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">docker image list</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>If you followed my <a href=\"https:/.netanel.xyz/2020/10/31/docker-tutorial/\" data-type=\"URL\" target=\"_blank\" rel=\"noreferrer noopener\">previous tutorial</a> you should already have an hello-world image available. If not, please pull it.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:paragraph --></p>\n<p>Note the Image ID.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":3} --></p>\n<h3>Removing an image</h3>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>To remove a local image use this line:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">docker image rm <image id></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading {\"level\":3} --></p>\n<h3>Running a container</h3>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>To execute the hello-world image you downloaded earlier, execute this line:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">docker run hello-world</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>For the next example, please run a container that will not finish immediately, such as an apache server. Simply replace \"hello-world\" with \"httpd\".</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":3} --></p>\n<h3>List running containers</h3>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>To show all running containers:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">docker container ls</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>Note the container ID.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":3} --></p>\n<h3>Remove container</h3>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>You can also remove a container this way:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">docker container rm <container id></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading {\"level\":3} --></p>\n<h3>Getting a bash shell to a running container</h3>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>If you have a container running in the background, you can get a bash shell to it this way:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">docker exec -it <container id> bash</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading {\"level\":3} --></p>\n<h3>Getting logs from a container</h3>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>You can inspect a container's stdout like so:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">docker logs <container id></pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>You should now know enough to start playing with containers on your own, have fun!</p>\n<p>\n<!-- /wp:paragraph --></p>\n",
            "author": {
                "name": "Netanel M."
            },
            "tags": [
                   "docker-compose",
                   "docker"
            ],
            "date_published": "2020-11-07T21:25:43+02:00",
            "date_modified": "2022-12-14T13:05:45+02:00"
        },
        {
            "id": "https://netanel-m.github.io/docker-introduction/",
            "url": "https://netanel-m.github.io/docker-introduction/",
            "title": "Docker Introduction",
            "summary": "In this post I'm going to give you an introduction for using Docker. But first, let's talk about the underlying technology. A container is a type of virtualization tool but unlike a Virtual Machine, a container shares its Kernel with its host, and allows access&hellip;",
            "content_html": "<p><!-- wp:paragraph --></p>\n<p>In this post I'm going to give you an introduction for using Docker.<br>But first, let's talk about the underlying technology.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":3} --></p>\n<h3>What's a container</h3>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>A container is a type of virtualization tool but unlike a Virtual Machine, a container shares its Kernel with its host, and allows access to resources using cgroups rather than fully virtualizing them the way a hypervisor does. Containers are complementary to VMs, and can be used with or without them.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":3} --></p>\n<h3>Two types of containers</h3>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>There are two types of containerization methods:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:list --></p>\n<ul>\n<li>Operating System Container\n<ul>\n<li>Virtualizes an entire operating system, such as Ubuntu or Centos.<br>This is the heavier solution, popularized by LXC/LXD and often used with Alpine Linux because of its lightweight nature. Such a container acts like a normal VM albeit much more lightweight, and can be administered the same way you administer an operating system.</li>\n</ul>\n</li>\n<li>Application Container\n<ul>\n<li>A newer, more popular method of using a container popularized by Docker where only the components needed to run the application running on the container are present. This gives you a more secure, more lightweight solution.</li>\n</ul>\n</li>\n</ul>\n<p>\n<!-- /wp:list --></p>\n<p><!-- wp:heading {\"level\":3} --></p>\n<h3>Installing Docker</h3>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>If you don't mind using an older version of Docker, you can always install it from your software repository. Note that you may be missing newer features we may use in This tutorial. </p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":4} --></p>\n<h4>Installing via Software Repositories</h4>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>On Ubuntu 20.04:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">sudo apt install docker docker-compose</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:heading {\"level\":4} --></p>\n<h4>Installing the Latest Version</h4>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>Ubuntu 20.04</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -<restore-line-break>sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable\"<restore-line-break>sudo apt install docker-ce docker-compose<restore-line-break>sudo usermod -aG docker $USER</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>Log out and in for the last line's changes to take effect</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":4} --></p>\n<h4>What about Centos and Docker?</h4>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>So with the case of Centos, the current version of docker is not supported and causes a dependency nightmare. I could give you instructions to maybe circumvent this and install the dependencies you need manually or try to go around the problem with the --nobest flag but instead I will give you another alternative.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":5} --></p>\n<h5>Podman</h5>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:quote --></p>\n<blockquote class=\"wp-block-quote\">\n<p><a href=\"http://podman.io\">Podman</a> is a daemonless, open source, Linux native tool designed to make it easy to find, run, build, share and deploy applications using Open Containers Initiative (<a href=\"https://www.opencontainers.org/\">OCI</a>) <a href=\"https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/#h.j2uq93kgxe0e\">Containers</a> and <a href=\"https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/#h.dqlu6589ootw\">Container Images</a>. Podman provides a command line interface (CLI) familiar to anyone who has used the Docker <a href=\"https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/#h.6yt1ex5wfo3l\">Container Engine</a>. Most users can simply alias Docker to Podman (alias docker=podman) without any problems. Similar to other common <a href=\"https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/#h.6yt1ex5wfo3l\">Container Engines</a> (Docker, CRI-O, containerd), Podman relies on an OCI compliant <a href=\"https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/#h.6yt1ex5wfo55\">Container Runtime</a> (runc, crun, runv, etc) to interface with the operating system and create the running containers. This makes the running containers created by Podman nearly indistinguishable from those created by any other common container engine.</p>\n<p><cite>http://docs.podman.io/en/latest/</cite></blockquote>\n<p>\n<!-- /wp:quote --></p>\n<p><!-- wp:paragraph --></p>\n<p>Podman is in the Centos Software repositories, and provides a podman-compose command that is compatible with docker compose which we'll use later in the tutorial. It should be almost completely compatible with Docker but it features additional features such as pod management as well as being daemonless, which solves some important security issues with Docker.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">sudo dnf install podman podman-compose<restore-line-break>alias docker-compose=\"podman-compose\"</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>You should now be able to run docker and docker-compose commands.</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:heading {\"level\":4} --></p>\n<h4></h4>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:heading {\"level\":3} --></p>\n<h3>Testing our installation</h3>\n<p>\n<!-- /wp:heading --></p>\n<p><!-- wp:paragraph --></p>\n<p>Let's pull and run a simple container</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:enlighter/codeblock --></p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">docker run hello-world</pre>\n<p>\n<!-- /wp:enlighter/codeblock --></p>\n<p><!-- wp:paragraph --></p>\n<p>If all is well you should get the following output:</p>\n<p>\n<!-- /wp:paragraph --></p>\n<p><!-- wp:code --></p>\n<pre class=\"wp-block-code\"><code>Hello from Docker!<restore-line-break>This message shows that your installation appears to be working correctly.<restore-line-break><restore-line-break>To generate this message, Docker took the following steps:<restore-line-break> 1. The Docker client contacted the Docker daemon.<restore-line-break> 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.<restore-line-break>    (amd64)<restore-line-break> 3. The Docker daemon created a new container from that image which runs the<restore-line-break>    executable that produces the output you are currently reading.<restore-line-break> 4. The Docker daemon streamed that output to the Docker client, which sent it<restore-line-break>    to your terminal.<restore-line-break><restore-line-break>To try something more ambitious, you can run an Ubuntu container with:<restore-line-break> $ docker run -it ubuntu bash<restore-line-break><restore-line-break>Share images, automate workflows, and more with a free Docker ID:<restore-line-break> https:&#47;&#47;hub.docker.com/<restore-line-break><restore-line-break>For more examples and ideas, visit:<restore-line-break> https://docs.docker.com/get-started/<restore-line-break></code></pre>\n<p>\n<!-- /wp:code --></p>\n<p><!-- wp:paragraph --></p>\n<p>I'll see you next time for some handy Docker/Podman commands!</p>\n<p>\n<!-- /wp:paragraph --></p>\n",
            "author": {
                "name": "Netanel M."
            },
            "tags": [
                   "docker"
            ],
            "date_published": "2020-10-31T12:07:44+02:00",
            "date_modified": "2022-12-14T13:05:45+02:00"
        }
    ]
}
